name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta

jobs:
  test:
    name: Test and lint
    uses: ./.github/workflows/development.yml
      
  docker:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - name: "checkout repository"
        uses: actions/checkout@v4

      - name: "üîß setup buildx"
        uses: docker/setup-buildx-action@v2

      - name: "üîß cache docker layers"
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "üîß docker meta"
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          tags: latest

    #   - name: "üì¶ docker build"
    #     uses: docker/build-push-action@v2
    #     with:
    #       context: .
    #       file: ./Dockerfile
    #       tags: ${{ steps.meta.outputs.tags }}
    #       labels: ${{ steps.meta.outputs.labels }}
    #       outputs: type=docker,dest=/tmp/docker.tar
    #       push: false
    #       cache-from: type=gha, scope=${{ github.workflow }}
    #       cache-to: type=gha, scope=${{ github.workflow }}
      - name: Create a simple tar file with content
        run: |
            mkdir -p /tmp/docker
            echo "FROM alpine" > /tmp/docker/Dockerfile
            echo "CMD [\"echo\", \"Hello, Docker!\"]" >> /tmp/docker/Dockerfile
            tar -cvf /tmp/docker.tar -C /tmp docker

      - name: "upload docker artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: /tmp/docker.tar

      - name: List /tmp directory
        run: ls -lh /tmp

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.16.0'
      - name: "üîß install npm@latest"
        run: npm install -g pnpm  # Install pnpm globally

      - name: "üì¶ install dependencies"
        run: pnpm install

      - name: "üìÇ production artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  release:
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
    name: Semantic release
    needs:
      - test
      - docker
    #   - build
    runs-on: ubuntu-latest
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List /tmp directory
        run: ls -lh /tmp

      - name: "üìÇ download docker artifacts"
        uses: actions/download-artifact@v3
        with:
          name: docker
          path: /tmp
        continue-on-error: true

      - name: "Check if /tmp/docker.tar exists and create if missing"
        run: |
            if [ ! -f /tmp/docker.tar ]; then
                echo "Warning: /tmp/docker.tar not found. Building and saving a simple Docker image."
                echo "FROM alpine" > Dockerfile
                echo 'CMD ["echo", "Generated on missing docker.tar"]' >> Dockerfile
                docker build -t my-simple-image -f Dockerfile .
                docker save my-simple-image -o /tmp/docker.tar
                echo "Simple Docker image saved to /tmp/docker.tar"
                rm Dockerfile # Clean up the temporary Dockerfile
            fi

      - name: "üì¶ load tag"
        run: |
          docker load --input /tmp/docker.tar
          docker image ls -a
      - name: Check NPM Token
        run: echo "NPM_TOKEN is set"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: "üöÄ release"
        id: semantic-release
        uses: open-sauced/semantic-release-conventional-config@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  cleanup:
    name: Cleanup actions
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: "‚ôªÔ∏è remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            build
            docker
            diagram
